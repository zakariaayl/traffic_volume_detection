# -*- coding: utf-8 -*-
"""traffic_volume.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eH7rTrisY2R4wSP8OuNdHniD6Po8-8TX
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('Metro_Interstate_Traffic_Volume.csv')
df.head()

print(df.isnull().sum())

print(df.info())
print(df.describe())

duplicates = df.duplicated()
print(duplicates)

import matplotlib.pyplot as plt

df['date_time'] = pd.to_datetime(df['date_time'])  # replace with your date column
df.set_index('date_time', inplace=True)
df['traffic_volume'].plot(figsize=(15, 6))
plt.title('Traffic Volume Over Time')
plt.show()

plt.figure(figsize=(12, 8))
plt.subplot(3, 1, 1)
df['hour'] = df.index.hour
df['day_of_week'] = df.index.dayofweek
df['month'] = df.index.month
df.groupby('hour')['traffic_volume'].mean().plot()

plt.title('Average Traffic Volume by Hour')

plt.subplot(3, 1, 2)
df.groupby('day_of_week')['traffic_volume'].mean().plot()
plt.title('Average Traffic Volume by Day of the Week')

plt.subplot(3, 1, 3)
df.groupby('month')['traffic_volume'].mean().plot()
plt.title('Average Traffic Volume by Month')

plt.tight_layout()
plt.show()

import pandas as pd

# Inspect the holiday column
print(df['holiday'].head(10))
print(df['holiday'].isnull().sum())

# Create the new holiday field
df['is_holiday'] = df['holiday'].apply(lambda x: 0 if pd.isnull(x) or x == 'None' else 1)

# Inspect the new column to ensure it's correct
print(df[['holiday', 'is_holiday']].head(10))

# Find unique values in the weather_main column
unique_weather = df['weather_main'].unique()

# Print the unique values
print("Unique values in 'weather_main' column:")
print(unique_weather)

# Count of each unique value in the weather_main column
weather_counts = df['weather_main'].value_counts()

# Print the counts
print("Counts of each unique value in 'weather_main' column:")
print(weather_counts)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error,r2_score
import joblib
from sklearn.model_selection import train_test_split
print(df.columns)



# Handle the holiday column
df['is_holiday'] = df['holiday'].apply(lambda x: 0 if pd.isnull(x) or x == 'None' else 1)

# Drop the original holiday column
df.drop('holiday', axis=1, inplace=True)

# Print the column names to verify presence of weather columns
print(df.columns)

# Encode categorical columns using one-hot encoding
df = pd.get_dummies(df, columns=['weather_main', 'weather_description'], drop_first=True)

# Create lag features and extract date-time features
df['traffic_volume_lag1'] = df['traffic_volume'].shift(1)
df['traffic_volume_lag2'] = df['traffic_volume'].shift(2)
df['hour'] = df.index.hour
df['day_of_week'] = df.index.dayofweek
df['month'] = df.index.month
df['year'] = df.index.year
df['day_of_month'] = df.index.day

#working with kelvin will make worse reslts
df['temp']=df['temp']-273.15
# Drop rows with NaN values introduced by lag features
df.dropna(inplace=True)

# Define the features (X) and the target (y)
X = df.drop('traffic_volume', axis=1)
max_volume = df['traffic_volume'].max()
y = df['traffic_volume']/ max_volume

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)
print(X_train.shape)
print(X_train.columns)
# Train the RandomForestRegressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
joblib.dump(model, 'traffic_volume_model.joblib')
# Predict and evaluate the model
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')

r2 = r2_score(y_test, y_pred)

# Calculate accuracy as a percentage
accuracy = r2 * 100

# Print evaluation metrics and accuracy
mae, mse, rmse, r2, accuracy

# Plot the actual vs. predicted traffic volume
plt.figure(figsize=(15, 6))
plt.plot(y_test.index, y_test, label='Actual')
plt.plot(y_test.index, y_pred, label='Predicted')
plt.legend()
plt.title('Actual vs Predicted Traffic Volume')
plt.xlabel('Date Time')
plt.ylabel('Traffic Volume')
plt.show()

def adjust_volume_by_distance_and_width(predicted_volume, my_road_km, my_road_width):
    """
    Adjust predicted traffic volume based on both distance and road width.

    Args:
        predicted_volume (float): Volume predicted by the model.
        my_road_km (float): Length of the target road in kilometers.
        highway_km (float): Length of the highway the model was trained on.
        my_road_width (float): Width of your road in meters.
        highway_width (float): Width of the original highway in meters.

    Returns:
        float: Adjusted traffic volume.
    """
    distance_ratio = my_road_km / 12.87
    width_ratio = my_road_width / 0.0355
    adjustment_factor = distance_ratio * width_ratio
    adjusted_volume = predicted_volume * adjustment_factor
    return adjusted_volume
#had data dial l highway li daro 3lih tests
#0.03048 km to 0.036576 km, or about 30 to 36 meters.
#12.87km

from datetime import datetime

new_data = X_test.iloc[-1:].copy()
print(new_data.columns)
# print(new_data)
# Update new_data with appropriate future date-time values and other features
# For demonstration, we'll use the same values, but in practice, you'd update these
future_date = '2024-07-10 15:00:00'  # Example: July 10, 2024, 2 PM

# Convert the string to a datetime object
future_date_time = datetime.strptime(future_date, '%Y-%m-%d %H:%M:%S')
new_data['hour'] = future_date_time.hour  # Example future hour
new_data['day_of_week'] = future_date_time.weekday() # Example future day of the week (Tuesday)
new_data['month'] = future_date_time.month # Example future month (July)
new_data['year'] = future_date_time.year
new_data['weather_description_thunderstorm with heavy rain']=True
# new_data[''] # Example future year
# Make future prediction
print(max_volume)
future_pred = model.predict(new_data)* max_volume
print(f'Future Traffic Volume Prediction for the highway : {future_pred[0]}')
print(f'adjusted volume for my road under the same circumstances weather o dkchi : {adjust_volume_by_distance_and_width(future_pred[0],10,0.01)} ')#road diali feh 1k f distance o 0.01 km f width

import pandas as pd

# Define the test sample
sample = pd.DataFrame({
    'temp': [285.32],
    'rain_1h': [0.0],
    'snow_1h': [0.0],
    'clouds_all': [75],
    'hour': [14],
    'day_of_week': [2],  # Tuesday
    'month': [8],
    'is_holiday': [0],


    'weather_main_Clouds': [True],
    'weather_main_Drizzle': [False],
    'weather_main_Fog': [False],
    'weather_main_Haze': [False],
    'weather_main_Mist': [False],
    'weather_main_Rain': [False],
    'weather_main_Smoke': [False],
    'weather_main_Snow': [False],
    'weather_main_Squall': [False],
    'weather_main_Thunderstorm': [False],
    'weather_description_Sky is Clear': [False],
    'weather_description_broken clouds': [True],  # Assume broken clouds
    'weather_description_drizzle': [False],
    'weather_description_few clouds': [False],
    'weather_description_fog': [False],
    'weather_description_freezing rain': [False],
    'weather_description_haze': [False],
    'weather_description_heavy intensity drizzle': [False],
    'weather_description_heavy intensity rain': [False],
    'weather_description_heavy snow': [False],
    'weather_description_light intensity drizzle': [False],
    'weather_description_light intensity shower rain': [False],
    'weather_description_light rain': [False],
    'weather_description_light rain and snow': [False],
    'weather_description_light shower snow': [False],
    'weather_description_light snow': [False],
    'weather_description_mist': [False],
    'weather_description_moderate rain': [False],
    'weather_description_overcast clouds': [False],
    'weather_description_proximity shower rain': [False],
    'weather_description_proximity thunderstorm': [False],
    'weather_description_proximity thunderstorm with drizzle': [False],
    'weather_description_proximity thunderstorm with rain': [False],
    'weather_description_scattered clouds': [False],
    'weather_description_shower drizzle': [False],
    'weather_description_shower snow': [False],
    'weather_description_sky is clear': [False],
    'weather_description_sleet': [False],
    'weather_description_smoke': [False],
    'weather_description_snow': [False],
    'weather_description_thunderstorm': [False],
    'weather_description_thunderstorm with drizzle': [False],
    'weather_description_thunderstorm with heavy rain': [False],
    'weather_description_thunderstorm with light drizzle': [False],
    'weather_description_thunderstorm with light rain': [False],
    'weather_description_thunderstorm with rain': [False],
    'weather_description_very heavy rain': [False],
    'traffic_volume_lag1': [1800.0],
    'traffic_volume_lag2': [1700.0],
    'year': [2018],
    'day_of_month': [1],
}, index=[pd.to_datetime('2018-10-02 14:00:00')])

print(sample)

future_pred = model.predict(sample)* max_volume
print(f'Future Traffic Volume Prediction for the highway : {future_pred[0]}')
print(f'adjusted volume for my road under the same circumstances weather o dkchi : {adjust_volume_by_distance_and_width(future_pred[0],10,0.01)} ')

"""future ajustment ,
-consideration de width peuvent affecter positvement ou negativement sur le volume de traffic(ila kan kber machi b darora volume kber ) ,meme chose pour distance
-ajout de ajustement sur la prediction en dependant sur si ce route est dans le centre de vie ou non (gueliz par exemple)
-consideration de feux rouge (ila kant data 3liha) et de temps de ce feux rouge ou stop sign ,
-consideratioin de rempoi aussi (nzido f volume o saf)
-consideration de vitesse maximale dial les vehicule en la comparen ave c celle de highway (n9ssmo l highway max speed 3la dialna ila kant data 3la kola route dialna mhm dial highway hia 35 miles per hour (56 km/h) mn wekipidea )
"""